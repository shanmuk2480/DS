#include <stdio.h>
#include<stdlib.h>

struct slist
{
    int data;
    struct slist*next;
};


//creating the linked list

typedef struct slist node;
node*create(node*first)
{
    node*new,*prev;
    int x;
    printf("Enter the data(enter -1 to stop)=");
    scanf("%d",&x);
    while (x!=-1)
    {
        new = (node*)malloc(sizeof(node));
        new->data = x;
        new->next = NULL;
        
        if (first==NULL)
        {
            first = new;
            prev = new;
        }
        else
        {
            prev->next = new;
            prev = new;
        }
    printf("Enter the data(enter -1 to stop)=");
    scanf("%d",&x);
    }
    return first;
}


//displaying the elements in the linked list
void display(node*first)
{
    node*temp = first;
    if (first==NULL)
    {
        printf("no list to print");
    }
    else
    {
    while(temp!=NULL)
    {
        printf("[%d]->",temp->data);
        temp = temp->next;
    }
    printf("NULL ");
    }
    }
    void main()
    {
        int k,x;
        node*head=NULL;
        head = create(head);
        display(head);
        k=count(head); 
        printf("\n");
        printf("No of nodes is %d\n",k);
        printf("\n enter the value of x:");
        scanf("%d",&x);
        search(head,x);
        printf("Enter the elements to insert=",x);
        scanf("%d",&x);
        head = insert_at_begin(head,x);
        printf("Enter the element=");
        scanf("%d",&x);
        head = insert_at_end(head,x);
    }
    
//function to find no of nodes in linked list

int count(node*first)
{
    int c = 0;
    node*temp = first;
    while(temp!=NULL)
    {
        c++;
        temp=temp->next;
    }
    return c;
}

//to search element in the list

void search(node*first,int x)
    {
        node*temp=first;
        int flag=0;
        while(temp!=NULL)
        {
            if(temp->data==x)
            {
                flag=1;
                break;
            }
            else
            {
                temp=temp->next;
            }
        }
        if(flag==1)
        {
            printf("the element %d is found",x);
        }
        else
        {
            printf("the element %d is not found",x);
        }
    }

//Insertion of an element in the beginning of a list

node*insert_at_begin(node*first,float x)
{
    node*new = (node*)malloc(sizeof(node));
    new->data = x;
    new->next = NULL;
    if (first==NULL)
    {
        first = new;
    }
    else
    {
        new->next = first;
        first = new;
    }
    return first;
} 

//Insertion at end of the list

node*insert_at_end(node*first,int x)
{
    node*temp = first;
    node*new = (node*)malloc(sizeof(node));
    new->data = x;
    new->next = NULL;
    if (first==NULL)
    {
        first = new;
    }
    else
    {
        while(temp->next!=NULL)
        {
            temp = temp->next;
        }
        
        temp->next = new;
    }
    return first;
}

//Insertion at the given position

node*insert_at_pos(node*first,int pos,itn x)
{
    node*temp=first;*new;
    int n = count(first);
    if (pos>1&&pos<n)
    {
        new = (node*)malloc(sizeof(node))
        new->data = x;
        new->next  = NULL;
        for (i=1,i<pos-1,i++)
        
    }
}
